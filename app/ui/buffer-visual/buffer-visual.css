.loading-spinner {
  border-bottom: 16px solid rgba(0, 0, 0, 0.2);
  border-left: 16px solid rgba(0, 0, 0, 0.2);
  border-right: 16px solid rgba(0, 0, 0, 0.2);
  border-top: 16px solid rgba(0, 0, 0, 0.5);
  border-radius: 100%;
  min-width: 200px;
  width: 200px;
  min-height: 200px;
  height: 200px;
  animation: spin 1.5s infinite cubic-bezier(1, 0.3, 0.5, 0.7);
  text-indent: 999em;
  margin: 0;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(359deg);
  }
}
/* styles/image-carousel.css */
/* 
    UPDATE COMMENT

    This Sass variable creates a map key value pairs, where each pair consists of the following:
    - the expression on the left represents a key
    - the expression on the right is value associated with that key

    In this case, the values on the right represent the corresponding values for hue, saturation, and lightness 
    of the color names on the left, which are the exact colors intended for usage in the visual 
    appearance of text, buttons, and other visual elements.
    For example "darkBlue" is a key that is a color name, and "hsl(" is a hexcode value that is 
    associated with "darkBlue".

    The map below is used for a simple, but reproducible function called "color($colorName)" that 
    can be used to clearly communicate which color is being to for one or more selected elements.

    This map can be expanded to include more colors other than the ones already listed, and the 
    hexcode values can be conveniently changed so that all elements that uses the same color will 
    have their colors updated to reflect this change.

    For more information on maps and key-value pairs, copy and paste this URL on an article about 
    maps from the Sass official website: https://sass-lang.com/documentation/values/maps/
*/
/*
    UPDATE COMMENT
    This function uses the map from the "$colors" variable to return the desired color included from 
    the map.

    The mapping of color names is necessary to avoid confusion from using color hexcodes on which 
    colors each element is using and to make the code usage of the CSS color property reproducible, 
    more understandable, and with less repetitive code.
*/
/* Container for the carousel */
.carousel-container {
  position: absolute;
  margin-left: auto;
  margin-right: auto;
  left: 0;
  right: 0;
  width: calc(100% - 32px);
  height: calc(100% - 32px);
  overflow: hidden;
  border-radius: 50%;
}

/* Styles for the carousel image */
.carousel-image {
  position: absolute;
  left: 50%;
  min-height: 100px;
  width: auto;
  height: 100px;
  transform: translateX(-50%);
  transition: top 0.5s ease-in-out, opacity 0.3s ease-in-out;
}

/* Image state: hidden (initial state) */
.carousel-image.hidden {
  top: -150%;
  opacity: 0;
}

/* Image state: entering the view */
.carousel-image.enter {
  top: 25%;
  opacity: 1;
}

/* Image state: exiting the view */
.carousel-image.exit {
  top: 100%;
  opacity: 1;
}

/* Image state: reset position (top of container) */
.carousel-image.reset {
  top: -150%;
  opacity: 0;
  transition: none; /* Instant transition for reset */
}

/* Overlay for the carousel */
.carousel-overlay {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  width: 100%;
  height: 100%;
  background: radial-gradient(circle, transparent 50%, hsl(0, 0%, 90%) 100%);
  border-radius: 50%;
  pointer-events: none;
}

/*
    This mixin is used to position and wrap children elements relative to the parent container element. It takes the following arguments to define flexbox properties for container elements:
        1. Sets the display to flex (essential for any of the other flex properties to function as intended).
        2. Enables/disables the wrapping of the children elements based on the "$flexWrap" variable argument.
            - "wrap" to have the children elements populate within the space 
              of the container
            - "nowrap" to have the children elements instead populate within 
              the same row/column
        3. Sets the orientation of the wrapping, whether in a row or column. This is based on the "$flexDirection" variable argument.
        4. Sets the starting position of each children element relative to the container element. This is based on the "$alignItems" variable argument:
            - "flex-start" to start from the beginning portion of the container
            - "center" to start from the middle portion
            - "flex-end" to start from the bottom portion
            - "stretch" to take up the available space of the container
        - Sets the positioning of all children elements relative to the container element. This is based on the "$alignContent" variable argument:
            - "flex-start" to orient all the children elements from the 
              beginning portion of the container
            - "center" to orient all the children elements from the middle portion
            - "flex-end" to orient all the children elements from the bottom portion
            - "stretch" to take up the available space of the container
        - Sets the alignment of all children elements when they don't take up all of the available space in the container. This is based on the "$justifyContent" variable argument.

*/
/*
  Placeholder selectors for the flex display of a container:
    - column flex direction, wrapping along the column for
      children elements, top-left starting point and alignment
      of children elements and text
*/
/*
        - same as previous, except no wrapping of children elements
*/
/*
        - column flex direction, wrapping, center starting point
          and alignment of children elements and text
*/
/*
        - same as previous, except no wrapping of children elements
*/
/*
        - row flex direction, wrapping, top-left starting point 
          and alignment of children elements and text
*/
/*
        - same as previous, except no wrapping of children elements
*/
/*
        - row flex direction, wrapping, center starting point
          and alignment of children elements and text
*/
.buffer-visual {
  display: flex;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  flex-direction: row;
  align-items: center;
  align-content: center;
  justify-content: center;
}

/*
        - row flex direction, wrapping, right starting point
          and alignment of children elements and text
*/
.buffer-visual {
  width: auto;
  height: auto;
  background-color: transparent;
}
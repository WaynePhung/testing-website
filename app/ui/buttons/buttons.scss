@use "./../icons/icons";
@use "./../../utils/colors/colors";
@use "./../../utils/mixins-other/display-flex";
@use "./../../utils/mixins-other/screen-widths" as s-w;
@use "./../../utils/mixins-other/show-hide-toggle" as s-h-t;
@use "./../../utils/size-spacing/nums-size-space" as n-s-s;
@use "./../../utils/size-spacing/row-column-gaps" as r-c-g;
@use "./../../utils/text-styling/link-styling";
@use "./../../utils/variables/variables-global" as v-g;

%button-global {
    @extend %flex-row-wrap-center;
    @extend %button-global-zIndexes;
    @include r-c-g.rowColumnGaps("m", "m");
    position: relative;
    overflow: hidden;
    border: map-get(n-s-s.$size-space, "2xs") solid transparent;
    border-radius: map-get(n-s-s.$size-space, "sm");
    cursor: default;
    transition: background-image 0.3 ease-out;
    padding: 0;
    width: auto;
    a {
        @extend %link;
        picture {
            @extend %icon;
        }
    }
    &:before {
        content: "";
        display: inline-block;
        position: absolute;
        // left: 50%;
        // top: 50%;
        border-radius: map-get(n-s-s.$size-space, "sm");
        transform: translate(-50%, -50%);
        width: calc(100% * 1.41421356237);
        padding-bottom: calc(100% * 1.41421356237);
        opacity: 0;
        transition: animation-play-state 0.3s linear;
        animation: spin 1.2s cubic-bezier(0.4, 0.53, 0.67, 0.8) infinite;
        animation-play-state: paused;
        @keyframes spin {
            from {transform: translate(-50%, -50%) rotate(0);}
            to   {transform: translate(-50%, -50%) rotate(360deg);}
        }
    }
    &:after {
        content: "";
        position: absolute;
        inset: map-get(n-s-s.$size-space, "2xs");
        border-radius: map-get(n-s-s.$size-space, "s");
    }
    &:hover {
        @extend %link-hover;
        &:before {
            opacity: 1;
            animation-play-state: running;
        }
    }
}

$button-types: (
    primary: primary,
    secondary: secondary
);

$button-type-styles: (
  primary: (
    background-color: colors.color('p', 30),
    border-width: map-get(n-s-s.$size-space, "xxxs"),
    border-style: solid,
    border-color: transparent,
    span-color: colors.color('p', 100),
    span-after-bg-color: colors.color('p', 100),
    filter: invert(95%) sepia(10%) saturate(1177%) hue-rotate(170deg) brightness(103%) contrast(99%), //changing icon image of black fill to light blue fill (p-100)
  ),
  secondary: (
    background-color: transparent,
    border-width: map-get(n-s-s.$size-space, "xxxs"),
    border-style: solid,
    border-color: colors.color('p', 30),
    span-color: colors.color('p', 30),
    span-after-bg-color: colors.color('p', 30),
    filter: invert(32%) sepia(87%) saturate(828%) hue-rotate(186deg) brightness(75%) contrast(88%) //from black to dark blue (p-30)
  )
);

@each $type, $type-value in $button-type-styles {
    %button-#{$type} {
        background-color: map-get($type-value, background-color);
        border-width: map-get($type-value, border-width);
        border-style: map-get($type-value, border-style);
        border-color: map-get($type-value, border-color);
        a {
            padding: map-get(n-s-s.$button-inset, primary);
            width: 100%;
            @include s-w.mediaQuery-maxOnly(375) {
                padding: map-get(n-s-s.$size-space, "sm") map-get(n-s-s.$size-space, "m") map-get(n-s-s.$size-space, "sm") map-get(n-s-s.$size-space, "m");
            }
            span {
                color: map-get($type-value, span-color);
                &:after {
                    background-color: map-get($type-value, span-after-bg-color);
                }
            }
            picture > img {
                filter: map-get($type-value, filter);
            }
        }
        picture > img {
            filter: map-get($type-value, filter);
        }
    }
}

$button-states: (
    loaded: loaded,
    placeholder: placeholder
);

%button-loaded {
    @extend %button-global;
    a {
        @extend %link;
        picture {
            @extend %icon;
        }
    }
    &:before {
        content: "";
        display: inline-block;
        position: absolute;
        // left: 50%;
        // top: 50%;
        border-radius: map-get(n-s-s.$size-space, "sm");
        transform: translate(-50%, -50%);
        width: calc(100% * 1.41421356237);
        padding-bottom: calc(100% * 1.41421356237);
        opacity: 0;
        transition: animation-play-state 0.3s linear;
        animation: spin 1.2s cubic-bezier(0.4, 0.53, 0.67, 0.8) infinite;
        animation-play-state: paused;
        @keyframes spin {
            from {transform: translate(-50%, -50%) rotate(0);}
            to   {transform: translate(-50%, -50%) rotate(360deg);}
        }
    }
    &:after {
        content: "";
        position: absolute;
        inset: map-get(n-s-s.$size-space, "2xs");
        border-radius: map-get(n-s-s.$size-space, "s");
    }
    &:hover {
        @extend %link-hover;
        &:before {
            opacity: 1;
            animation-play-state: running;
        }
    }
}

%button-placeholder {
    @extend %button-global;
    a {
        @extend %link;
        cursor: default !important;
        picture {
            @extend %icon;
        }
    }
}

$button-loaded-styles: (
    primary: (
        before-after-bg-color: colors.color('p', 30),
        after-border-radius: map-get(n-s-s.$size-space, "s"),
        hover-background-image: linear-gradient(to right bottom, colors.color('p', 30, 65), colors.color('p', 30)),
        hover-before-bg: conic-gradient(colors.color('p', 30), colors.color('p', 100))
    ),
    secondary: (
        before-after-bg-color: colors.color('n', 90),
        after-border-radius: map-get(n-s-s.$size-space, "s"),
        hover-background-image: transparent,
        hover-before-bg: conic-gradient(colors.color('p', 30) 0deg, colors.color('n', 90) 25deg)
    )
);

$button-placeholder-styles: (
    primary: (
        border-color: transparent
    ),
    secondary: (
        border-color: colors.color('n', 70)
    )
);

@each $type, $type-value in $button-types {
    @each $state, $state-value in $button-states {
        %button-#{$type}-#{$state} {
            @extend %button-#{$type};
            @extend %button-#{$state};
            @if ($state == loaded) {
                @each $loaded-key, $loaded-value in $button-loaded-styles {
                    @if ($loaded-key == $type) {
                        &:before, &:after {
                            background-color: map-get($loaded-value, before-after-bg-color);
                        }
                        &:after {
                            border-radius: map-get($loaded-value, after-border-radius);
                        }
                        &:hover {
                            background-image: map-get($loaded-value, hover-background-image);
                            &:before {
                                background: map-get($loaded-value, hover-before-bg);
                            }
                        }
                    }
                }
            } @else if ($state == placeholder) {
                @each $placeholder-key, $placeholder-value in $button-placeholder-styles {
                    @if ($placeholder-key == $type) {
                        border-color: map-get($placeholder-value, border-color);
                    }
                }
            } @else {
                //Apply nothing.
            }
        }
    }
}

@mixin generate-button-classes {
    button {
        @each $type, $type-value in $button-types {
            @each $state, $state-value in $button-states {
                &.button-#{$type}-#{$state} {
                    @extend %button-#{$type}-#{$state};
                }
            }
        }
    }
}

@include generate-button-classes();

header > nav.navigationBar {
    & > button {
        &#contactButton {
            // @include s-h-t.sHT-mQ-dsdh(350);
            @include s-h-t.sHT-mQ-dsdh(v-g.$bp-dt);
            // margin: map-get(n-s-s.$size-space, "xs") 0;
        }
        // @include s-w.mediaQuery-maxOnly(v-g.$bp-dt) {
        //     width: 100%;
        // }
        // @include s-w.mediaQuery-minOnly(v-g.$bp-dt) {
        //     display: none;
        // }
    }
}

main  button.toc-mobileButton {
    @include s-h-t.sHT-mQ-dsdh(v-g.$bp-dt);
}

footer > article#endMessage > .contactButtons > button {
    @include s-w.mediaQuery-maxOnly(250) {
        width: 100%;
    }
    @include s-w.mediaQuery-minMax(250, 375) {
        width: 75%;
    }
}

button a > figure {
    width: map-get(n-s-s.$size-space, "l");
    height: map-get(n-s-s.$size-space, "l");
}

@mixin buttonWidth($className, $maxWidth) {
    &#{$className} {
        // max-width: #{$maxWidth}px;
        // width: 100%;
        width: #{$maxWidth}px;
    }
}

button {
    @include buttonWidth(".linkedIn", 160);
    @include buttonWidth(".email", 135);
}